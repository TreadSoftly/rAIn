[build-system]
requires      = ["hatchling>=1.25"]
build-backend = "hatchling.build"

[project]
name            = "Argos"
version         = "1.2.3"
description     = "The Many Eyed Sentinel"
authors         = [{ name = "Dr4gnf1y", email = "shadowburner@protonmail.com" }]
readme          = "README.md"
requires-python = ">=3.9,<3.13"

dependencies = [
  # ── Core ML stack ──
  "torch>=2.4,<2.6",
  "torchvision>=0.19,<0.21",

  # Ultralytics: need 8.3+ for official YOLO11/YOLO12 hub weights.
  "ultralytics>=8.3,<8.6",

  # ── ONNX Runtime (platform/py aware) ──
  "onnxruntime==1.19.2 ; python_version < '3.10'",
  "onnxruntime>=1.22,<1.23 ; python_version >= '3.10' and platform_system == 'Windows'",
  "onnxruntime>=1.22,<1.24 ; python_version >= '3.10' and platform_system != 'Windows'",

  # Conservative but modern ONNX toolchain (supports modern exporters)
  "onnx>=1.18,<1.19",

  # ── Imaging / numerics ──
  # Force GUI-capable OpenCV on ALL platforms (no headless)
  "opencv-python>=4.11,<4.12",

  # NumPy: raise floor so Torch/Tv CPU wheels resolve across Py 3.10–3.12
  "numpy!=2.0.*,>=2.1,<2.3",
  "pillow>=10.0,<12.0",
  "pillow-avif-plugin>=1.4",

  # Matplotlib
  "matplotlib>=3.9,<3.10 ; python_version < '3.10'",
  "matplotlib>=3.10       ; python_version >= '3.10'",

  "scipy>=1.11,<1.15",
  "pandas>=2.2",

  # Infra / utils
  "redis>=5.0",
  "typer>=0.12",
  "thop==0.1.1.post2209072238",
]

[project.optional-dependencies]
dev = [
  "pytest",
  "pytest-cov",
  "black",
  "isort",
  "ruff",
  "pre-commit",
  "boto3",
  "moto[all]~=4.2",
]

audio = [
  "torchaudio",
]

onnx-tools = [
  # Keep slim tool optional
  "onnxslim<0.1.59",
  # Add simplifier so 'simplify=True' can succeed when available;
  # export code falls back to simplify=False if it's missing.
  "onnxsim>=0.4.36,<0.5",
]

# Optional CLI progress UI (spinners/colors). Code works without; this just enables pretty UX.
progress-ui = ["halo>=0.0.31", "colorama>=0.4.6"]

[project.scripts]
# Core entry
target      = "panoptes.cli:main"
argos       = "panoptes.cli:main"

# Tasks
d           = "panoptes.cli:main_detect"
detect      = "panoptes.cli:main_detect"
hm          = "panoptes.cli:main_heatmap"
heatmap     = "panoptes.cli:main_heatmap"
gj          = "panoptes.cli:main_geojson"
geojson     = "panoptes.cli:main_geojson"
all         = "panoptes.cli:main_all"
pose        = "panoptes.cli:main_pose"
pse         = "panoptes.cli:main_pse"
seg         = "panoptes.cli:main_pse"
clf         = "panoptes.cli:main_classify"
classify    = "panoptes.cli:main_classify"
obb         = "panoptes.cli:main_obb"
obj         = "panoptes.cli:main_obb"

# Live shortcuts (task selection is by args)
lv          = "panoptes.live.cli:main"
live        = "panoptes.live.cli:main"
livevideo   = "panoptes.live.cli:main"
argos-live  = "panoptes.live.cli:main"

[tool.hatch.build]
include = [
  "panoptes/**/*.py",
  "panoptes/assets/*",
]
exclude = [
  "panoptes/model/*.onnx",
  "panoptes/model/*.pt",
]

[tool.pytest.ini_options]
addopts   = "-q"
testpaths = ["tests"]

[tool.black]
line-length = 100

[tool.isort]
profile           = "black"
line_length       = 100
force_single_line = true

[tool.ruff]
line-length = 100
