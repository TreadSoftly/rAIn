name: Deploy Monorepo Project

on:
  workflow_call:
    inputs:
      project-dir:
        description: "Path like projects/argos"
        required: true
        type: string

permissions:
  id-token: write # OIDC â†’ AWS
  contents: read # repo checkout

env:
  AWS_REGION: us-east-1

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 0) Checkout
      - name: Check out source
        uses: actions/checkout@v4
        with:
          lfs: false

      # 0.5) Ensure a consistent Python (bootstrap uses stdlib only, but let's be explicit)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            ${{ inputs.project-dir }}/pyproject.toml
            ${{ inputs.project-dir }}/requirements.txt

      # 1) Warm models so Docker can COPY them
      - name: Warm models (bootstrap)
        working-directory: ${{ inputs.project-dir }}
        env:
          ARGOS_WEIGHT_PRESET: all
          PYTHONUTF8: "1" # harmless on Linux; fixes Windows if reused
        run: python bootstrap.py --ensure --yes

      # 2) AWS creds via OIDC
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::211125358149:role/TreadSoftlyAWS-GHA-OIDC
          aws-region: ${{ env.AWS_REGION }}

      # 3) CDK CLI
      - name: Install CDK CLI
        run: npm install -g aws-cdk@2

      # 4) CDK synth/deploy (install only what the CDK app needs)
      - name: Install Python deps for CDK app
        working-directory: ${{ inputs.project-dir }}
        run: pip install --quiet aws-cdk-lib constructs

      - name: CDK synth
        working-directory: ${{ inputs.project-dir }}
        run: cdk synth

      - name: CDK deploy
        working-directory: ${{ inputs.project-dir }}
        run: cdk deploy --require-approval never
