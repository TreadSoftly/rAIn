#!/usr/bin/env bash
set -euo pipefail

HERE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT="$(cd "$HERE/.." && pwd)"
PROJ_DIR="$ROOT/projects"

ensure_git_lfs() {
  if command -v git >/dev/null 2>&1; then
    if git lfs version >/dev/null 2>&1; then
      git -C "$ROOT" lfs install --local >/dev/null 2>&1 || true
      GIT_LFS_SKIP_SMUDGE=0 git -C "$ROOT" lfs pull >/dev/null 2>&1 || true
    else
      echo "⚠️ Git LFS not installed. Large files (models) may be missing."
      echo "    Install Git LFS and re-run this command."
    fi
  fi
}

proj=""
run_tests=1
want_sdist=1
want_wheel=1
tokens=()

while (($#)); do
  t="$1"; shift
  lt="${t,,}"
  case "$lt" in
    pack|package|build|me) ;;                   # ignore noise
    --no-tests)      run_tests=0 ;;
    --wheel-only)    want_sdist=0; want_wheel=1 ;;
    --sdist-only)    want_sdist=1; want_wheel=0 ;;
    argos|argos:pack|pack:argos|argos:build|build:argos) proj="argos" ;;
    *) tokens+=("$t") ;;
  esac
done

cwd="$(pwd)"
if [[ -z "${proj:-}" ]]; then
  case "$cwd" in *"/projects/argos"*) proj="argos" ;; esac
fi

if [[ -z "${proj:-}" ]]; then
  if [[ "$cwd" == "$ROOT" || "$cwd" == "$PROJ_DIR" ]]; then
    echo "Specify the project:  pack argos  |  argos pack  |  pack --no-tests" >&2
    exit 2
  fi
fi

ensure_git_lfs

if [[ "$proj" == "argos" ]]; then
  PY="$(command -v python3 || command -v python)"
  "$PY" "$ROOT/projects/argos/bootstrap.py" --ensure --yes >/dev/null 2>&1 || true
  VPY="$("$PY" "$ROOT/projects/argos/bootstrap.py" --print-venv)"
  export PYTHONPYCACHEPREFIX="${XDG_CACHE_HOME:-$HOME/.cache}/rAIn/pycache"

  "$VPY" -m pip install --upgrade pip setuptools wheel build >/dev/null
  ( cd "$ROOT/projects/argos" && "$VPY" -m pip install -e .[dev] >/dev/null )

  if [[ "$run_tests" -eq 1 ]]; then
    ( cd "$ROOT/projects/argos" && "$VPY" -m pytest -q )
  fi

  args=()
  [[ "$want_sdist" -eq 1 ]] && args+=(--sdist)
  [[ "$want_wheel" -eq 1 ]] && args+=(--wheel)
  ( cd "$ROOT/projects/argos" && "$VPY" -m build "${args[@]}" )

  mkdir -p "$ROOT/dist/argos"
  cp -f "$ROOT/projects/argos/dist/"* "$ROOT/dist/argos/" 2>/dev/null || true

  echo "✅ Build complete."
  echo "   • artifacts → projects/argos/dist/"
  echo "   • mirror    → dist/argos/"
  exit 0
fi

echo "Unknown project: $proj" >&2
exit 2
