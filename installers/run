#!/usr/bin/env bash
set -euo pipefail
HERE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT="$(cd "$HERE/.." && pwd)"
PROJ_DIR="$ROOT/projects"

# Collect args â†’ infer project + pass-through tokens
proj=""
tokens=()
lower() { printf '%s' "$1" | tr '[:upper:]' '[:lower:]'; }
while (($#)); do
  t="$1"; shift
  lt="$(lower "$t")"
  case "$lt" in
    run|me) ;;  # ignore fluff words
    argos|argos:run|run:argos) proj="argos" ;;
    *) tokens+=("$t") ;;
  esac
done

# If user is inside a project dir, allow bare "run"
cwd="$(pwd)"
if [[ -z "${proj:-}" ]]; then
  case "$cwd" in
    *"/projects/argos"*) proj="argos" ;;
  esac
fi

# Outside a specific project folder? force explicit project
if [[ -z "${proj:-}" ]]; then
  if [[ "$cwd" == "$ROOT" || "$cwd" == "$PROJ_DIR" ]]; then
    echo "Specify the project:  run argos  |  argos [args]" >&2
    exit 2
  fi
fi

# Dispatch to project bootstrap + CLI (no Git LFS dependency)
if [[ "$proj" == "argos" ]]; then
  PY="$(command -v python3 || command -v python)"
  "$PY" "$ROOT/projects/argos/bootstrap.py" --ensure --yes >/dev/null 2>&1 || true
  VPY="$("$PY" "$ROOT/projects/argos/bootstrap.py" --print-venv)"
  export PYTHONPYCACHEPREFIX="${XDG_CACHE_HOME:-$HOME/.cache}/rAIn/pycache"
  exec "$VPY" -m panoptes.cli "${tokens[@]}"
fi

echo "Unknown project: $proj" >&2
exit 2
