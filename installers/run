#!/usr/bin/env bash
set -euo pipefail

HERE="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT="$(cd "$HERE/.." && pwd)"
PROJ_DIR="$ROOT/projects"

ensure_git_lfs() {
  if command -v git >/dev/null 2>&1; then
    if git lfs version >/dev/null 2>&1; then
      git -C "$ROOT" lfs install --local >/dev/null 2>&1 || true
      GIT_LFS_SKIP_SMUDGE=0 git -C "$ROOT" lfs pull >/dev/null 2>&1 || true
    else
      echo "⚠️ Git LFS not installed. Large files (models) may be missing."
      echo "   Install Git LFS and re-run this command."
    fi
  fi
}

# Collect args → infer project + pass-through tokens
proj=""
tokens=()
saw_build=0

while (($#)); do
  t="$1"; shift
  lt="${t,,}"
  case "$lt" in
    run|me) ;;                              # ignore fluff
    build|package|pack) saw_build=1 ;;
    argos|argos:run|run:argos|argos:build|build:argos) proj="argos" ;;
    *) tokens+=("$t") ;;
  esac
done

cwd="$(pwd)"
if [[ -z "${proj:-}" ]]; then
  case "$cwd" in *"/projects/argos"*) proj="argos" ;; esac
fi

if [[ -z "${proj:-}" ]]; then
  if [[ "$cwd" == "$ROOT" || "$cwd" == "$PROJ_DIR" ]]; then
    echo "Specify the project:  run argos  |  argos [args]" >&2
    exit 2
  fi
fi

ensure_git_lfs

# Build hand-off
if [[ "$saw_build" -eq 1 ]]; then
  exec "$ROOT/installers/build" "$proj" "${tokens[@]}"
fi

# Project dispatch
if [[ "$proj" == "argos" ]]; then
  PY="$(command -v python3 || command -v python)"
  "$PY" "$ROOT/projects/argos/bootstrap.py" --ensure --yes >/dev/null 2>&1 || true
  VPY="$("$PY" "$ROOT/projects/argos/bootstrap.py" --print-venv)"
  export PYTHONPYCACHEPREFIX="${XDG_CACHE_HOME:-$HOME/.cache}/rAIn/pycache"
  exec "$VPY" -m panoptes.cli "${tokens[@]}"
fi

echo "Unknown project: $proj" >&2
exit 2
